package com.narvi.messagesystem.database

import mu.KotlinLogging
import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource
import org.springframework.transaction.support.TransactionSynchronizationManager

/**
 * Replica Î∞è Source Ï≤òÎ¶¨
 * Message DBÏùò Í≤ΩÏö∞ channelIdÎ•º Í∏∞Ï§ÄÏúºÎ°ú Î™®ÎìàÎü¨ ÏÉ§Îî© Ï≤òÎ¶¨
 * - ÌôÄÏàòÏù∏ Í≤ΩÏö∞ -> Message1
 * - ÏßùÏàòÏù∏ Í≤ΩÏö∞ -> Message2
 */
class RoutingDataSource : AbstractRoutingDataSource() {
    override fun determineCurrentLookupKey(): Any {
        var dataSourceKey =
            if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) "replica" else "source"

        val channelId = ShardContext.getChannelId()
        if (channelId != null) {
            dataSourceKey += if (channelId % 2L == 0L) "Message2" else "Message1"
        }

        log.info("üöè Routing to {} dataSource", dataSourceKey)
        return dataSourceKey
    }

    companion object {
        private val log = KotlinLogging.logger {}
    }
}